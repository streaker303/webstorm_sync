<application>
  <component name="AppStorage">
    <histories>
      <item value="ensure" />
      <item value="immediate" />
      <item value="default Stroke Color" />
      <item value="retrieval" />
      <item value="crumbs-tip" />
      <item value="inverse" />
      <item value="axis Label" />
      <item value="broken Line" />
      <item value="equiv" />
      <item value="http-equiv" />
      <item value="reactive" />
      <item value="spare" />
      <item value="duration" />
      <item value="decimals" />
      <item value="device Type List" />
      <item value="set Default Mount App" />
      <item value="strict Style Isolation" />
      <item value="calculable" />
      <item value="descending" />
      <item value="state Dialog" />
      <item value="coordinate System" />
      <item value="proportion" />
      <item value="geo Coord" />
      <item value="convert Data" />
      <item value="keyboard Move" />
      <item value="super Class" />
      <item value="draw Custom Elements" />
      <item value="italic" />
      <item value="emphasis" />
      <item value="sign Panel" />
      <item value="anchor Node" />
      <item value="batch Create Custom" />
      <item value="execution Listener" />
      <item value="extension Elements" />
      <item value="Assignable" />
      <item value="is Immediate" />
      <item value="is Abstract" />
      <item value="candidate Starter Groups" />
      <item value="modeling" />
      <item value="event Definitions" />
      <item value="candidate Starter Users" />
      <item value="moddle Extensions" />
      <item value="import { assign } from 'min-dash'; /** * A palette provider for BPMN 2.0 elements. */ export default function PaletteProvider( palette, create, elementFactory, spaceTool, lassoTool, handTool, globalConnect, translate) { this._palette = palette; this._create = create; this._elementFactory = elementFactory; this._spaceTool = spaceTool; this._lassoTool = lassoTool; this._handTool = handTool; this._globalConnect = globalConnect; this._translate = translate; palette.registerProvider(this); } PaletteProvider.$inject = [ 'palette', 'create', 'elementFactory', 'spaceTool', 'lassoTool', 'handTool', 'globalConnect', 'translate' ]; PaletteProvider.prototype.getPaletteEntries = function(element) { var actions = {}, create = this._create, elementFactory = this._elementFactory, spaceTool = this._spaceTool, lassoTool = this._lassoTool, handTool = this._handTool, globalConnect = this._globalConnect, translate = this._translate; function createAction(type, group, className, title, options) { function createListener(event) { var shape = elementFactory.createShape(assign({ type: type }, options)); if (options) { shape.businessObject.di.isExpanded = options.isExpanded; } create.start(event, shape); } var shortType = type.replace(/^bpmn:/, ''); return { group: group, className: className, title: title || translate('Create {type}', { type: shortType }), action: { dragstart: createListener, click: createListener } }; } function createSubprocess(event) { var subProcess = elementFactory.createShape({ type: 'bpmn:SubProcess', x: 0, y: 0, isExpanded: true }); var startEvent = elementFactory.createShape({ type: 'bpmn:StartEvent', x: 40, y: 82, parent: subProcess }); create.start(event, [ subProcess, startEvent ], { hints: { autoSelect: [ startEvent ] } }); } function createParticipant(event) { create.start(event, elementFactory.createParticipantShape()); } assign(actions, { 'hand-tool': { group: 'tools', className: 'bpmn-icon-hand-tool', title: translate('Activate the hand tool'), action: { click: function(event) { handTool.activateHand(event); } } }, 'lasso-tool': { group: 'tools', className: 'bpmn-icon-lasso-tool', title: translate('Activate the lasso tool'), action: { click: function(event) { lassoTool.activateSelection(event); } } }, 'space-tool': { group: 'tools', className: 'bpmn-icon-space-tool', title: translate('Activate the create/remove space tool'), action: { click: function(event) { spaceTool.activateSelection(event); } } }, 'global-connect-tool': { group: 'tools', className: 'bpmn-icon-connection-multi', title: translate('Activate the global connect tool'), action: { click: function(event) { globalConnect.toggle(event); } } }, 'tool-separator': { group: 'tools', separator: true }, 'create.start-event': createAction( 'bpmn:StartEvent', 'event', 'bpmn-icon-start-event-none', translate('Create StartEvent') ), 'create.intermediate-event': createAction( 'bpmn:IntermediateThrowEvent', 'event', 'bpmn-icon-intermediate-event-none', translate('Create Intermediate/Boundary Event') ), 'create.end-event': createAction( 'bpmn:EndEvent', 'event', 'bpmn-icon-end-event-none', translate('Create EndEvent') ), 'create.exclusive-gateway': createAction( 'bpmn:ExclusiveGateway', 'gateway', 'bpmn-icon-gateway-none', translate('Create Gateway') ), 'create.task': createAction( 'bpmn:Task', 'activity', 'bpmn-icon-task', translate('Create Task') ), 'create.data-object': createAction( 'bpmn:DataObjectReference', 'data-object', 'bpmn-icon-data-object', translate('Create DataObjectReference') ), 'create.data-store': createAction( 'bpmn:DataStoreReference', 'data-store', 'bpmn-icon-data-store', translate('Create DataStoreReference') ), 'create.subprocess-expanded': { group: 'activity', className: 'bpmn-icon-subprocess-expanded', title: translate('Create expanded SubProcess'), action: { dragstart: createSubprocess, click: createSubprocess } }, 'create.participant-expanded': { group: 'collaboration', className: 'bpmn-icon-participant', title: translate('Create Pool/Participant'), action: { dragstart: createParticipant, click: createParticipant } }, 'create.group': createAction( 'bpmn:Group', 'artifact', 'bpmn-icon-group', translate('Create Group') ), }); return actions; };" />
      <item value="intermediate" />
      <item value="participant-expanded" />
      <item value="Data Object Reference" />
      <item value="Intermediate Throw Event" />
      <item value="stroke" />
      <item value="SUITABILITY SCORE AVERGE" />
      <item value="execution Listener Length" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="212" />
        <entry key="ENGLISH" value="213" />
        <entry key="FRENCH" value="5" />
        <entry key="ROMANIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="TURKISH" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="HINDI" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1616480169461" />
  </component>
</application>